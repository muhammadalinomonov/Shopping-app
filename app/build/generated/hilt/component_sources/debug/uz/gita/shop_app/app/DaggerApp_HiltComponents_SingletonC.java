// Generated by Dagger (https://dagger.dev).
package uz.gita.shop_app.app;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import cafe.adriel.voyager.core.model.ScreenModel;
import cafe.adriel.voyager.hilt.ScreenModelFactory;
import cafe.adriel.voyager.hilt.VoyagerHiltViewModelFactories;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import uz.gita.shop_app.MainActivity;
import uz.gita.shop_app.MainActivity_MembersInjector;
import uz.gita.shop_app.di.SharedPrefModule;
import uz.gita.shop_app.di.SharedPrefModule_ProvidesMySharedPrefFactory;
import uz.gita.shop_app.di.SharedPrefModule_ProvidesSharedPrefFactory;
import uz.gita.shop_app.domain.repository.AuthRepository;
import uz.gita.shop_app.domain.repository.ShopRepository;
import uz.gita.shop_app.domain.repository.impl.AuthRepositoryImpl;
import uz.gita.shop_app.domain.repository.impl.ShopRepositoryImpl;
import uz.gita.shop_app.domain.repository.impl.ShopRepositoryImpl_Factory;
import uz.gita.shop_app.domain.repository.impl.ShopRepositoryImpl_MembersInjector;
import uz.gita.shop_app.navigation.NavigationDispatcher;
import uz.gita.shop_app.ui.screen.firsrscreen.FirstScreenDirectionImpl;
import uz.gita.shop_app.ui.screen.firsrscreen.FirstScreenModel;
import uz.gita.shop_app.ui.screen.login.LoginDirectionImpl;
import uz.gita.shop_app.ui.screen.login.LoginModel;
import uz.gita.shop_app.ui.screen.main.addproduct.AddProductDirection;
import uz.gita.shop_app.ui.screen.main.addproduct.AddProductModel;
import uz.gita.shop_app.ui.screen.main.page.myproducts.MyProductDirectionImpl;
import uz.gita.shop_app.ui.screen.main.page.myproducts.ProductsModel;
import uz.gita.shop_app.ui.screen.main.page.shopscreen.ShopModel;
import uz.gita.shop_app.ui.screen.onBoarding.OnBoardingDirectionImpl;
import uz.gita.shop_app.ui.screen.onBoarding.OnBoardingModel;
import uz.gita.shop_app.ui.screen.signup.SignUpDirectionImpl;
import uz.gita.shop_app.ui.screen.signup.SignUpModel;
import uz.gita.shopappexam.data.locale.SharedPref;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApp_HiltComponents_SingletonC {
  private DaggerApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private SharedPrefModule sharedPrefModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    public Builder sharedPrefModule(SharedPrefModule sharedPrefModule) {
      this.sharedPrefModule = Preconditions.checkNotNull(sharedPrefModule);
      return this;
    }

    public App_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (sharedPrefModule == null) {
        this.sharedPrefModule = new SharedPrefModule();
      }
      return new SingletonCImpl(applicationContextModule, sharedPrefModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements App_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public App_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements App_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public App_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements App_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public App_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements App_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements App_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public App_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements App_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public App_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements App_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public App_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends App_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends App_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends App_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends App_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private Provider<LoginModel> loginModelProvider;

    private Provider<SignUpModel> signUpModelProvider;

    private Provider<OnBoardingModel> onBoardingModelProvider;

    private Provider<FirstScreenModel> firstScreenModelProvider;

    private Provider<ShopModel> shopModelProvider;

    private Provider<ProductsModel> productsModelProvider;

    private Provider<AddProductModel> addProductModelProvider;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(activityParam);

    }

    private LoginDirectionImpl loginDirectionImpl() {
      return new LoginDirectionImpl(singletonCImpl.navigationDispatcherProvider.get());
    }

    private SignUpDirectionImpl signUpDirectionImpl() {
      return new SignUpDirectionImpl(singletonCImpl.navigationDispatcherProvider.get());
    }

    private OnBoardingDirectionImpl onBoardingDirectionImpl() {
      return new OnBoardingDirectionImpl(singletonCImpl.navigationDispatcherProvider.get());
    }

    private FirstScreenDirectionImpl firstScreenDirectionImpl() {
      return new FirstScreenDirectionImpl(singletonCImpl.navigationDispatcherProvider.get());
    }

    private MyProductDirectionImpl myProductDirectionImpl() {
      return new MyProductDirectionImpl(singletonCImpl.navigationDispatcherProvider.get());
    }

    private AddProductDirection addProductDirection() {
      return new AddProductDirection(singletonCImpl.navigationDispatcherProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final Activity activityParam) {
      this.loginModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, activityCImpl, 0);
      this.signUpModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, activityCImpl, 1);
      this.onBoardingModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, activityCImpl, 2);
      this.firstScreenModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, activityCImpl, 3);
      this.shopModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, activityCImpl, 4);
      this.productsModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, activityCImpl, 5);
      this.addProductModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, activityCImpl, 6);
    }

    @Override
    public VoyagerHiltViewModelFactories.InternalViewModelFactory internalViewModelFactory() {
      return new VoyagerHiltViewModelFactories.InternalViewModelFactory(ImmutableSet.<String>of(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Map<Class<? extends ScreenModelFactory>, Provider<ScreenModelFactory>> screenModelFactories(
        ) {
      return ImmutableMap.<Class<? extends ScreenModelFactory>, Provider<ScreenModelFactory>>of();
    }

    @Override
    public Map<Class<? extends ScreenModel>, Provider<ScreenModel>> screenModels() {
      return ImmutableMap.<Class<? extends ScreenModel>, Provider<ScreenModel>>builderWithExpectedSize(7).put(LoginModel.class, ((Provider) loginModelProvider)).put(SignUpModel.class, ((Provider) signUpModelProvider)).put(OnBoardingModel.class, ((Provider) onBoardingModelProvider)).put(FirstScreenModel.class, ((Provider) firstScreenModelProvider)).put(ShopModel.class, ((Provider) shopModelProvider)).put(ProductsModel.class, ((Provider) productsModelProvider)).put(AddProductModel.class, ((Provider) addProductModelProvider)).build();
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ImmutableSet.<String>of(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return ImmutableSet.<String>of();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public void injectMainActivity(MainActivity arg0) {
      injectMainActivity2(arg0);
    }

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity2(MainActivity instance) {
      MainActivity_MembersInjector.injectNavigationHandler(instance, singletonCImpl.navigationDispatcherProvider.get());
      MainActivity_MembersInjector.injectSharedPref(instance, singletonCImpl.providesMySharedPrefProvider.get());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ActivityCImpl activityCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ActivityCImpl activityCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.activityCImpl = activityCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // uz.gita.shop_app.ui.screen.login.LoginModel 
          return (T) new LoginModel(singletonCImpl.bindAuthRepositoryProvider.get(), singletonCImpl.providesMySharedPrefProvider.get(), activityCImpl.loginDirectionImpl());

          case 1: // uz.gita.shop_app.ui.screen.signup.SignUpModel 
          return (T) new SignUpModel(singletonCImpl.bindAuthRepositoryProvider.get(), singletonCImpl.providesMySharedPrefProvider.get(), activityCImpl.signUpDirectionImpl());

          case 2: // uz.gita.shop_app.ui.screen.onBoarding.OnBoardingModel 
          return (T) new OnBoardingModel(activityCImpl.onBoardingDirectionImpl());

          case 3: // uz.gita.shop_app.ui.screen.firsrscreen.FirstScreenModel 
          return (T) new FirstScreenModel(activityCImpl.firstScreenDirectionImpl());

          case 4: // uz.gita.shop_app.ui.screen.main.page.shopscreen.ShopModel 
          return (T) new ShopModel(singletonCImpl.bindShopRepositoryProvider.get());

          case 5: // uz.gita.shop_app.ui.screen.main.page.myproducts.ProductsModel 
          return (T) new ProductsModel(singletonCImpl.bindShopRepositoryProvider.get(), activityCImpl.myProductDirectionImpl());

          case 6: // uz.gita.shop_app.ui.screen.main.addproduct.AddProductModel 
          return (T) new AddProductModel(singletonCImpl.bindShopRepositoryProvider.get(), singletonCImpl.providesMySharedPrefProvider.get(), activityCImpl.addProductDirection());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ViewModelCImpl extends App_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return ImmutableMap.<String, Provider<ViewModel>>of();
    }
  }

  private static final class ActivityRetainedCImpl extends App_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends App_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends App_HiltComponents.SingletonC {
    private final SharedPrefModule sharedPrefModule;

    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<AuthRepositoryImpl> authRepositoryImplProvider;

    private Provider<AuthRepository> bindAuthRepositoryProvider;

    private Provider<SharedPreferences> providesSharedPrefProvider;

    private Provider<SharedPref> providesMySharedPrefProvider;

    private Provider<NavigationDispatcher> navigationDispatcherProvider;

    private Provider<ShopRepositoryImpl> shopRepositoryImplProvider;

    private Provider<ShopRepository> bindShopRepositoryProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam,
        SharedPrefModule sharedPrefModuleParam) {
      this.sharedPrefModule = sharedPrefModuleParam;
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam, sharedPrefModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam,
        final SharedPrefModule sharedPrefModuleParam) {
      this.authRepositoryImplProvider = new SwitchingProvider<>(singletonCImpl, 0);
      this.bindAuthRepositoryProvider = DoubleCheck.provider((Provider) authRepositoryImplProvider);
      this.providesSharedPrefProvider = DoubleCheck.provider(new SwitchingProvider<SharedPreferences>(singletonCImpl, 2));
      this.providesMySharedPrefProvider = DoubleCheck.provider(new SwitchingProvider<SharedPref>(singletonCImpl, 1));
      this.navigationDispatcherProvider = DoubleCheck.provider(new SwitchingProvider<NavigationDispatcher>(singletonCImpl, 3));
      this.shopRepositoryImplProvider = new SwitchingProvider<>(singletonCImpl, 4);
      this.bindShopRepositoryProvider = DoubleCheck.provider((Provider) shopRepositoryImplProvider);
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return ImmutableSet.<Boolean>of();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    @Override
    public void injectApp(App app) {
    }

    @CanIgnoreReturnValue
    private ShopRepositoryImpl injectShopRepositoryImpl(ShopRepositoryImpl instance) {
      ShopRepositoryImpl_MembersInjector.injectSharedPref(instance, providesMySharedPrefProvider.get());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // uz.gita.shop_app.domain.repository.impl.AuthRepositoryImpl 
          return (T) new AuthRepositoryImpl();

          case 1: // uz.gita.shopappexam.data.locale.SharedPref 
          return (T) SharedPrefModule_ProvidesMySharedPrefFactory.providesMySharedPref(singletonCImpl.sharedPrefModule, singletonCImpl.providesSharedPrefProvider.get());

          case 2: // android.content.SharedPreferences 
          return (T) SharedPrefModule_ProvidesSharedPrefFactory.providesSharedPref(singletonCImpl.sharedPrefModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 3: // uz.gita.shop_app.navigation.NavigationDispatcher 
          return (T) new NavigationDispatcher();

          case 4: // uz.gita.shop_app.domain.repository.impl.ShopRepositoryImpl 
          return (T) singletonCImpl.injectShopRepositoryImpl(ShopRepositoryImpl_Factory.newInstance());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
